{"version":3,"sources":["components/Game/index.js","App.js","index.js"],"names":["shuffle","arr","range","arguments","length","undefined","map","arrObj","i","randomizer","Math","floor","log","random","sort","a","b","objWithRandomizer","Header","props","react_default","createElement","style","width","className","Scorebar","score","Tile","defaultSize","w","concat","window","innerWidth","onClick","event","state","parent_Getter","tiles","index","cleared","alert","parent_Setter","name","shuffled","src","alt","GameBoard","_useState","useState","_useState2","Object","slicedToArray","gameState","setGameState","useEffect","element","p","key","Container","children","Game","App","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.c710f795.chunk.js","sourcesContent":["//eslint-disable-next-line \nimport React, { useState, useEffect } from \"react\"\nimport \"./game.css\"\n\n//* [ Non-Component Global Vars and Utility Functions ]\n\n// ? Default layout formatting\nconst layout = {\n   margin: 5,\n   gutter: 5\n}\n\n// ? Function that randomizes the order of an array's elements\nlet shuffle = (arr, range = 10000) => {\n   let arrWithRandomizer = arr.map((arrObj, i) => {\n      let randomizer = Math.floor(Math.log(Math.random()) * range)\n      return { arrObj, randomizer }\n   })\n\n   let sortedWithRandomizer = arrWithRandomizer.sort((a, b) => {\n      return a.randomizer - b.randomizer\n   })\n\n   let shuffledArr = sortedWithRandomizer.map(objWithRandomizer => objWithRandomizer.arrObj)\n\n   return shuffledArr\n}\n\n// let grab\n\n// React-Dom function Components\n\nfunction Header(props) {\n   return (\n      <div style={{ width: \"100%\" }}>\n         <div className=\"jumbotron header\" style={{ width: \"100%\" }}>\n            <h1 className=\"display-4\">Grandma's Browser Cookies</h1>\n            < hr />\n            <h3 className=\"lead\"><em> \"Good to the last byte!\" </em></h3>\n         </div>\n      </div>\n   )\n}\n\nfunction Scorebar(props) {\n\n   return (\n      <div className=\"card score-panel\">\n         <div className=\"card-body score-panel-display\">\n            <b><u> Your current score: </u></b> <span> {props.score} </span>\n         </div>\n      </div>\n   )\n}\n\nfunction Tile(props) {\n   let defaultSize = {\n      w: `${(window.innerWidth) * 0.15}px`\n   }\n\n   let handleTileClick = (event) => {\n      // console.log(props.index)\n      let state = props.parent_Getter\n      if (state.tiles[props.index].cleared) {\n         alert(\"Well, looks like IE froze... Guess you lost!!!\")\n         props.parent_Setter(\n            {\n               tiles: [\n                  {\n                     name: \"Cheapo Deals\",\n                     cleared: false\n                  },\n                  {\n                     name: \"Jigsaw Puzzles Direct\",\n                     cleared: false\n                  },\n                  {\n                     name: \"Roarin' Twenties Reunion\",\n                     cleared: false\n                  },\n                  {\n                     name: \"Buy Knitting Supplies NOW\",\n                     cleared: false\n                  },\n                  {\n                     name: \"Enter Best Sweepstakes Free\",\n                     cleared: false\n                  },\n                  {\n                     name: \"Magazines Direct 2 Door\",\n                     cleared: false\n                  },\n                  {\n                     name: \"Clean Your PC 1000xFaster\",\n                     cleared: false\n                  },\n                  {\n                     name: \"Download Printable TV Guide\",\n                     cleared: false\n                  }\n               ],\n               score: 0,\n               shuffled: false\n            })\n      } else if (!state.tiles[props.index].cleared) {\n         // console.log(tiles[props.index])\n         state.tiles[props.index].cleared = true\n         // console.log(tiles[props.index])\n         props.parent_Setter({ tiles: state.tiles, score: state.score + 1, shuffled: false })\n      }\n   }\n\n   return (\n\n      <div className=\"card tile\"\n         onClick={handleTileClick}\n         style={{ width: defaultSize.w }}\n      >\n\n         <div className=\"card-body\">\n            <b className=\"card-text\">{props.name}</b>\n         </div>\n         <img className=\"card-img-top\" src=\"/browserArt.png\" alt=\"Whoops!\" />\n      </div>\n\n\n\n   )\n}\n\nfunction GameBoard(props) {\n\n   const [gameState, setGameState] = useState(\n      {\n         tiles: [\n            {\n               name: \"Cheapo Deals\",\n               cleared: false\n            },\n            {\n               name: \"Jigsaw Puzzles Direct\",\n               cleared: false\n            },\n            {\n               name: \"Roarin' Twenties Reunion\",\n               cleared: false\n            },\n            {\n               name: \"Buy Knitting Supplies NOW\",\n               cleared: false\n            },\n            {\n               name: \"Enter Best Sweepstakes Free\",\n               cleared: false\n            },\n            {\n               name: \"Magazines Direct 2 Door\",\n               cleared: false\n            },\n            {\n               name: \"Clean Your PC 1000xFaster\",\n               cleared: false\n            },\n            {\n               name: \"Download Printable TV Guide\",\n               cleared: false\n            }\n         ],\n         score: 0,\n         shuffled: false\n      })\n\n\n   useEffect(() => {\n      if (!gameState.shuffled) {\n         let shuffled = shuffle(gameState.tiles)\n         setGameState({ tiles: shuffled, score: gameState.score, shuffled: true })\n      }\n      if (gameState.score === 8) {\n         alert(\"You won! Your grandma thanks you.\")\n      }\n   })\n\n   return (\n      <div>\n         <Scorebar score={gameState.score} />\n         <div className=\"card gameboard-container\" >\n            <div className=\"gameboard\">\n               {\n                  gameState.tiles.map((element, p) => {\n                     return <Tile\n                        key={p}\n                        index={p}\n                        name={element.name}\n                        cleared={element.cleared}\n                        parent_Setter={setGameState}\n                        parent_Getter={gameState}\n                     />\n                  })\n               }\n            </div>\n         </div>\n      </div>\n   )\n}\n\nfunction Container(props) {\n\n   return (\n      <div className=\"container app-container\" >\n         {props.children}\n      </div>\n   )\n}\n\nfunction Game(props) {\n\n   return (\n      <Container >\n         <Header />\n         <GameBoard />\n      </Container>\n   )\n}\n\nexport {\n\n   Game\n}","import React from 'react';\nimport { Game } from \"./components/Game\"\n\nfunction App(props) {\n  return (\n    <Game />\n  )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}